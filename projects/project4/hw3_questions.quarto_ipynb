{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Multinomial Logit Model\"\n",
        "author: \"Ruoqi Li\"\n",
        "date: today\n",
        "---\n",
        "\n",
        "\n",
        "This assignment expores two methods for estimating the MNL model: (1) via Maximum Likelihood, and (2) via a Bayesian approach using a Metropolis-Hastings MCMC algorithm. \n",
        "\n",
        "\n",
        "## 1. Likelihood for the Multi-nomial Logit (MNL) Model\n",
        "\n",
        "Suppose we have $i=1,\\ldots,n$ consumers who each select exactly one product $j$ from a set of $J$ products. The outcome variable is the identity of the product chosen $y_i \\in \\{1, \\ldots, J\\}$ or equivalently a vector of $J-1$ zeros and $1$ one, where the $1$ indicates the selected product. For example, if the third product was chosen out of 3 products, then either $y=3$ or $y=(0,0,1)$ depending on how we want to represent it. Suppose also that we have a vector of data on each product $x_j$ (eg, brand, price, etc.). \n",
        "\n",
        "We model the consumer's decision as the selection of the product that provides the most utility, and we'll specify the utility function as a linear function of the product characteristics:\n",
        "\n",
        "$$ U_{ij} = x_j'\\beta + \\epsilon_{ij} $$\n",
        "\n",
        "where $\\epsilon_{ij}$ is an i.i.d. extreme value error term. \n",
        "\n",
        "The choice of the i.i.d. extreme value error term leads to a closed-form expression for the probability that consumer $i$ chooses product $j$:\n",
        "\n",
        "$$ \\mathbb{P}_i(j) = \\frac{e^{x_j'\\beta}}{\\sum_{k=1}^Je^{x_k'\\beta}} $$\n",
        "\n",
        "For example, if there are 3 products, the probability that consumer $i$ chooses product 3 is:\n",
        "\n",
        "$$ \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{e^{x_1'\\beta} + e^{x_2'\\beta} + e^{x_3'\\beta}} $$\n",
        "\n",
        "A clever way to write the individual likelihood function for consumer $i$ is the product of the $J$ probabilities, each raised to the power of an indicator variable ($\\delta_{ij}$) that indicates the chosen product:\n",
        "\n",
        "$$ L_i(\\beta) = \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} = \\mathbb{P}_i(1)^{\\delta_{i1}} \\times \\ldots \\times \\mathbb{P}_i(J)^{\\delta_{iJ}}$$\n",
        "\n",
        "Notice that if the consumer selected product $j=3$, then $\\delta_{i3}=1$ while $\\delta_{i1}=\\delta_{i2}=0$ and the likelihood is:\n",
        "\n",
        "$$ L_i(\\beta) = \\mathbb{P}_i(1)^0 \\times \\mathbb{P}_i(2)^0 \\times \\mathbb{P}_i(3)^1 = \\mathbb{P}_i(3) = \\frac{e^{x_3'\\beta}}{\\sum_{k=1}^3e^{x_k'\\beta}} $$\n",
        "\n",
        "The joint likelihood (across all consumers) is the product of the $n$ individual likelihoods:\n",
        "\n",
        "$$ L_n(\\beta) = \\prod_{i=1}^n L_i(\\beta) = \\prod_{i=1}^n \\prod_{j=1}^J \\mathbb{P}_i(j)^{\\delta_{ij}} $$\n",
        "\n",
        "And the joint log-likelihood function is:\n",
        "\n",
        "$$ \\ell_n(\\beta) = \\sum_{i=1}^n \\sum_{j=1}^J \\delta_{ij} \\log(\\mathbb{P}_i(j)) $$\n",
        "\n",
        "\n",
        "\n",
        "## 2. Simulate Conjoint Data\n",
        "\n",
        "We will simulate data from a conjoint experiment about video content streaming services. We elect to simulate 100 respondents, each completing 10 choice tasks, where they choose from three alternatives per task. For simplicity, there is not a \"no choice\" option; each simulated respondent must select one of the 3 alternatives. \n",
        "\n",
        "Each alternative is a hypothetical streaming offer consistent of three attributes: (1) brand is either Netflix, Amazon Prime, or Hulu; (2) ads can either be part of the experience, or it can be ad-free, and (3) price per month ranges from \\$4 to \\$32 in increments of \\$4.\n",
        "\n",
        "The part-worths (ie, preference weights or beta parameters) for the attribute levels will be 1.0 for Netflix, 0.5 for Amazon Prime (with 0 for Hulu as the reference brand); -0.8 for included adverstisements (0 for ad-free); and -0.1*price so that utility to consumer $i$ for hypothethical streaming service $j$ is \n",
        "\n",
        "$$\n",
        "u_{ij} = (1 \\times Netflix_j) + (0.5 \\times Prime_j) + (-0.8*Ads_j) - 0.1\\times Price_j + \\varepsilon_{ij}\n",
        "$$\n",
        "\n",
        "where the variables are binary indicators and $\\varepsilon$ is Type 1 Extreme Value (ie, Gumble) distributed.\n",
        "\n",
        "The following code provides the simulation of the conjoint data.\n",
        "\n",
        ":::: {.callout-note collapse=\"true\"}"
      ],
      "id": "cd1b3454"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "n_respondents = 100\n",
        "n_tasks = 10\n",
        "n_alternatives = 3\n",
        "\n",
        "brands = ['Hulu', 'Netflix', 'Prime']\n",
        "prices = np.arange(4, 36, 4)  # $4 to $32\n",
        "ads = [0, 1]  # 0 = no ads, 1 = has ads\n",
        "\n",
        "# Utility coefficients\n",
        "beta = {\n",
        "    'Netflix': 1.0,\n",
        "    'Prime': 0.5,\n",
        "    'Ads': -0.8,\n",
        "    'Price': -0.1\n",
        "}\n",
        "\n",
        "rows = []\n",
        "\n",
        "for resp in range(n_respondents):\n",
        "    for task in range(n_tasks):\n",
        "        alts = []\n",
        "        for alt in range(n_alternatives):\n",
        "            brand = np.random.choice(brands)\n",
        "            ad = np.random.choice(ads)\n",
        "            price = np.random.choice(prices)\n",
        "            \n",
        "            # Indicator vars\n",
        "            netflix = 1 if brand == 'Netflix' else 0\n",
        "            prime = 1 if brand == 'Prime' else 0\n",
        "            \n",
        "            # Utility calculation\n",
        "            utility = (beta['Netflix'] * netflix +\n",
        "                       beta['Prime'] * prime +\n",
        "                       beta['Ads'] * ad +\n",
        "                       beta['Price'] * price +\n",
        "                       np.random.gumbel())\n",
        "            \n",
        "            alts.append((brand, ad, price, utility))\n",
        "        \n",
        "        # Select the alternative with highest utility\n",
        "        chosen = np.argmax([u for (_, _, _, u) in alts])\n",
        "        \n",
        "        for idx, (brand, ad, price, utility) in enumerate(alts):\n",
        "            rows.append({\n",
        "                'Respondent': resp,\n",
        "                'Task': task,\n",
        "                'Alternative': idx,\n",
        "                'Chosen': 1 if idx == chosen else 0,\n",
        "                'Brand': brand,\n",
        "                'Netflix': 1 if brand == 'Netflix' else 0,\n",
        "                'Prime': 1 if brand == 'Prime' else 0,\n",
        "                'Ads': ad,\n",
        "                'Price': price\n",
        "            })\n",
        "\n",
        "df = pd.DataFrame(rows)"
      ],
      "id": "ea688c0c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::::\n",
        "\n",
        "\n",
        "\n",
        "## 3. Preparing the Data for Estimation\n",
        "\n",
        "The \"hard part\" of the MNL likelihood function is organizing the data, as we need to keep track of 3 dimensions (consumer $i$, covariate $k$, and product $j$) instead of the typical 2 dimensions for cross-sectional regression models (consumer $i$ and covariate $k$). The fact that each task for each respondent has the same number of alternatives (3) helps.  In addition, we need to convert the categorical variables for brand and ads into binary variables.\n",
        "\n",
        "- Converting the categorical brand variable into two binary indicators: `Netflix`, `Prime` (with Hulu as the reference category),\n",
        "- Including indicators for ads (0 = ad-free, 1 = with ads),\n",
        "- Including the monthly price,\n",
        "- Tracking which alternative was chosen by the respondent."
      ],
      "id": "687b9a89"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df['Group'] = df['Respondent'] * n_tasks + df['Task']\n",
        "df_prepared = df[['Respondent', 'Task', 'Alternative', 'Group', 'Chosen',\n",
        "                  'Netflix', 'Prime', 'Ads', 'Price']]"
      ],
      "id": "762e9a5b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Estimation via Maximum Likelihood"
      ],
      "id": "19a72e6c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "from scipy.optimize import minimize\n",
        "from scipy.special import logsumexp\n",
        "\n",
        "# Features and response\n",
        "X = df_prepared[['Netflix', 'Prime', 'Ads', 'Price']].values\n",
        "y = df_prepared['Chosen'].values\n",
        "groups = df_prepared['Group'].values\n",
        "\n",
        "# Unique groups for choice sets\n",
        "unique_groups = np.unique(groups)"
      ],
      "id": "acde9104",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "To estimate the parameters of the MNL model, we first implement the log-likelihood function. Each individual chooses one alternative from a set of three, and the probability of choosing an alternative is modeled using the softmax function derived from the utility specification.\n",
        "\n",
        "The negative log-likelihood function is computed as follows:"
      ],
      "id": "d3c4ef76"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Log-likelihood function\n",
        "def neg_log_likelihood(beta):\n",
        "    utilities = X @ beta  # linear part\n",
        "    log_likelihood = 0\n",
        "    for group in unique_groups:\n",
        "        mask = groups == group\n",
        "        u = utilities[mask]\n",
        "        y_group = y[mask]\n",
        "        log_prob = u - logsumexp(u)  # log softmax\n",
        "        log_likelihood += np.sum(y_group * log_prob)\n",
        "    return -log_likelihood  # negative for minimization"
      ],
      "id": "af5f4f29",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "After defining the log-likelihood function, we use scipy.optimize.minimize() to estimate the model parameters. We apply the BFGS algorithm to find the maximum likelihood estimates (MLEs), and use the inverse Hessian matrix to compute standard errors and 95% confidence intervals for each parameter."
      ],
      "id": "81e73310"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Initial guess\n",
        "beta_init = np.zeros(X.shape[1])\n",
        "\n",
        "# Estimate using scipy.optimize\n",
        "result = minimize(neg_log_likelihood, beta_init, method='BFGS')\n",
        "beta_hat = result.x\n",
        "hessian_inv = result.hess_inv\n",
        "\n",
        "# Compute standard errors from Hessian\n",
        "se = np.sqrt(np.diag(hessian_inv))\n",
        "\n",
        "# 95% CI\n",
        "z = 1.96\n",
        "conf_int = np.vstack((beta_hat - z * se, beta_hat + z * se)).T\n",
        "\n",
        "# Results table\n",
        "params = ['beta_Netflix', 'beta_Prime', 'beta_Ads', 'beta_Price']\n",
        "results_df = pd.DataFrame({\n",
        "    'Parameter': params,\n",
        "    'Estimate': beta_hat,\n",
        "    'Std. Error': se,\n",
        "    'CI Lower (95%)': conf_int[:, 0],\n",
        "    'CI Upper (95%)': conf_int[:, 1]\n",
        "})\n",
        "results_df"
      ],
      "id": "1518035d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### The interpretation of each coefficient: \n",
        "\n",
        "- **`beta_Netflix = 1.04`**: Respondents strongly prefer Netflix over the baseline category (Hulu). The 95% confidence interval \\([0.99, 1.09]\\) does not include zero, confirming statistical significance.\n",
        "- **`beta_Prime = 0.58`**: Amazon Prime is also preferred relative to Hulu, though to a lesser extent than Netflix. The effect is statistically significant.\n",
        "- **`beta_Ads = -0.81`**: There is a strong negative impact of advertisements on utility, as indicated by the large negative estimate and a confidence interval well below zero.\n",
        "- **`beta_Price = -0.097`**: Price has a small but statistically significant negative effect on utility, consistent with theoretical expectations.\n",
        "\n",
        "\n",
        "\n",
        "## 5. Estimation via Bayesian Methods"
      ],
      "id": "bc468145"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "def log_prior(beta):\n",
        "    logp = 0\n",
        "    logp += -0.5 * np.sum((beta[:3] / 5) ** 2) - 3 * np.log(5 * np.sqrt(2 * np.pi))\n",
        "    logp += -0.5 * (beta[3] ** 2) - np.log(np.sqrt(2 * np.pi))\n",
        "    return logp\n",
        "\n",
        "# Posterior = log-likelihood + log-prior\n",
        "def log_posterior(beta):\n",
        "    return -neg_log_likelihood(beta) + log_prior(beta)\n",
        "\n",
        "n_steps = 11000\n",
        "burn_in = 1000\n",
        "dim = 4\n",
        "beta_current = np.zeros(dim)\n",
        "log_post_current = log_posterior(beta_current)\n",
        "samples = np.zeros((n_steps, dim))\n",
        "\n",
        "# Proposal SDs\n",
        "proposal_sds = np.array([0.05, 0.05, 0.05, 0.005])\n",
        "np.random.seed(42)\n",
        "\n",
        "for step in range(n_steps):\n",
        "    proposal = beta_current + np.random.normal(0, proposal_sds)\n",
        "    log_post_proposal = log_posterior(proposal)\n",
        "    accept_prob = np.exp(log_post_proposal - log_post_current)\n",
        "    if np.random.rand() < accept_prob:\n",
        "        beta_current = proposal\n",
        "        log_post_current = log_post_proposal\n",
        "    samples[step] = beta_current\n",
        "\n",
        "posterior_samples = samples[burn_in:]\n",
        "posterior_samples"
      ],
      "id": "8710732f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "| Column Index | Parameter Name  | Interpretation |\n",
        "|--------------|------------------|----------------|\n",
        "| `[ , 0]`      | `beta_Netflix`   | User preference for **Netflix**, relative to the reference category (Hulu) |\n",
        "| `[ , 1]`      | `beta_Prime`     | User preference for **Amazon Prime** |\n",
        "| `[ , 2]`      | `beta_Ads`       | **Negative impact of ads** (a more negative value indicates greater dislike for ads) |\n",
        "| `[ , 3]`      | `beta_Price`     | **Negative impact of price** (a more negative value indicates greater sensitivity to price) |"
      ],
      "id": "ce7126d9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Extract samples for beta_Netflix\n",
        "beta_netflix_samples = posterior_samples[:, 0]\n",
        "\n",
        "# Plot trace plot and histogram\n",
        "fig, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=False)\n",
        "\n",
        "# Trace plot\n",
        "ax[0].plot(beta_netflix_samples, color='black', linewidth=0.5)\n",
        "ax[0].set_title(\"Trace Plot for beta_Netflix\")\n",
        "ax[0].set_ylabel(\"Sampled Value\")\n",
        "\n",
        "# Histogram\n",
        "ax[1].hist(beta_netflix_samples, bins=50, color='skyblue', edgecolor='black', density=True)\n",
        "ax[1].set_title(\"Posterior Distribution of beta_Netflix\")\n",
        "ax[1].set_xlabel(\"beta_Netflix\")\n",
        "ax[1].set_ylabel(\"Density\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2c48c91a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- **Trace Plot** (Top):  \n",
        "  The trace plot shows rapid mixing and no obvious trend or drift, indicating that the sampler has converged and is exploring the posterior effectively.\n",
        "\n",
        "- **Posterior Histogram** (Bottom):  \n",
        "  The histogram approximates a smooth, bell-shaped distribution centered around the posterior mean. This reflects a stable estimate with symmetric uncertainty."
      ],
      "id": "a0246bfb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# Compute posterior summary statistics\n",
        "param_names = ['beta_Netflix', 'beta_Prime', 'beta_Ads', 'beta_Price']\n",
        "posterior_means = np.mean(posterior_samples, axis=0)\n",
        "posterior_sds = np.std(posterior_samples, axis=0)\n",
        "cred_ints = np.percentile(posterior_samples, [2.5, 97.5], axis=0).T\n",
        "\n",
        "# Combine into a DataFrame\n",
        "posterior_summary = pd.DataFrame({\n",
        "    'Parameter': param_names,\n",
        "    'Posterior Mean': posterior_means,\n",
        "    'Posterior Std. Dev': posterior_sds,\n",
        "    '95% CI Lower': cred_ints[:, 0],\n",
        "    '95% CI Upper': cred_ints[:, 1]\n",
        "})\n",
        "\n",
        "posterior_summary"
      ],
      "id": "e173d300",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Interpretation\n",
        "- `beta_Netflix` and `beta_Prime` are positive, showing that people prefer Netflix and Prime over the base brand (Hulu).\n",
        "- `beta_Ads` is negative, meaning people dislike ads.\n",
        "- `beta_Price` is also negative, meaning higher prices reduce utility.\n",
        "- All 95% credible intervals do **not include 0**, so all four parameters are statistically meaningful. This confirms that the Bayesian estimation gives results consistent with what we expect based on the data.\n",
        "\n",
        "## 6. Discussion\n",
        "Suppose we did **not** simulate the data and instead received these results from a real-world conjoint study. Here's what we can conclude:\n",
        "\n",
        "- `β_Netflix > β_Prime` means that, on average, respondents **prefer Netflix over Amazon Prime**, all else being equal.\n",
        "- The **positive values** for both brand coefficients (compared to the baseline Hulu) suggest that both Netflix and Prime are generally preferred brands.\n",
        "- `β_price` is **negative**, which makes intuitive sense — higher prices reduce the likelihood of choosing an alternative. This is consistent with basic economic theory and consumer behavior.\n",
        "- Overall, the signs and magnitudes of the parameters are reasonable and aligned with real-world expectations, even without knowing the data were simulated.\n",
        "\n",
        "\n",
        "\n",
        "### Why move beyond the basic MNL model?\n",
        "\n",
        "The standard Multinomial Logit (MNL) model assumes that **everyone shares the same preferences**. For example:\n",
        "\n",
        "> Everyone is equally likely to prefer Netflix over Hulu,  \n",
        "> and equally sensitive to price changes.\n",
        "\n",
        "But in the real world, this is rarely true:\n",
        "\n",
        "- Some people **love Netflix**, others don't care.\n",
        "- Some people are **very price-sensitive**, others are not.\n",
        "- Some tolerate ads, others strongly avoid them.\n",
        "\n",
        "To reflect this real-world variation, we need a model that allows **individual-level differences** in preferences. This leads us to the **multi-level (or hierarchical)** model.\n",
        "\n",
        "Instead of estimating just one set of parameters for the entire population, we assume each person \\( i \\) has their own preference vector \\( \\beta_i \\), drawn from a population distribution:\n",
        "\\[\n",
        "\\beta_i \\sim \\mathcal{N}(\\mu, \\Sigma)\n",
        "\\]\n",
        "\n",
        "This model captures **both overall trends** and **individual differences**, making it much more realistic for analyzing real-world conjoint data.\n",
        "\n",
        "### Key Modifications: \n",
        "1. **Simulating hierarchical data**:\n",
        "   - Instead of one global β vector, we assume each respondent \\( i \\) has their own preference vector \\( \\beta_i \\).\n",
        "   - These individual \\( \\beta_i \\)s are drawn from a population distribution:\n",
        "     \\[\n",
        "     \\beta_i \\sim \\mathcal{N}(\\mu, \\Sigma)\n",
        "     \\]\n",
        "   - You first draw \\( \\beta_i \\) for each respondent, and then simulate choices using that individual's preferences.\n",
        "\n",
        "2. **Estimating the model**:\n",
        "   - You no longer estimate a single \\( \\beta \\), but instead estimate:\n",
        "     - \\( \\mu \\): the mean of the population distribution,\n",
        "     - \\( \\Sigma \\): the covariance matrix (individual-level variation),\n",
        "     - \\( \\beta_i \\): each respondent’s specific preferences (if using full Bayesian methods).\n",
        "   - This often requires **Bayesian methods** (e.g., MCMC, HMC in PyMC or Stan) or **frequentist approaches** like simulated maximum likelihood.\n"
      ],
      "id": "f8e84523"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/ruoqili/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}